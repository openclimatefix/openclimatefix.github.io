{"version":3,"sources":["webpack://ocf-website/./src/components/Layout.jsx","webpack://ocf-website/./src/components/LogoCloud/index.jsx","webpack://ocf-website/./src/components/LogoCloud/logocloud.module.css","webpack://ocf-website/./src/components/PostLink.jsx","webpack://ocf-website/./src/components/PostList.jsx","webpack://ocf-website/./src/pages/projects/open-energy-data.jsx"],"names":["children","siteTitle","useStaticQuery","site","siteMetadata","title","className","LogoCloud","LOGOS","logos","name","image","link","StaticQuery","query","render","data","map","img","allFile","edges","find","node","relativePath","endsWith","key","href","type","src","childImageSharp","fixed","alt","style","filter","post","frontmatter","date","path","authorName","authorImage","coverImageUnsplashId","excerpt","readingTime","fields","Link","to","text","posts","id","allMarkdownRemark","maxHeight"],"mappings":"oKA+CA,IA9Be,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAWVC,GAVOC,oBAAe,cAULC,KAAKC,aAAaC,MAEzC,OACE,gCACE,gBAAC,IAAD,CAAKA,MAAOJ,IAEZ,gBAAC,IAAD,MACA,wBAAMK,UAAU,uEACbN,GAEH,gBAAC,IAAD,S,0FCjCS,SAASO,EAAT,GAA+B,IACtCC,EADqC,EAATC,OACX,CACrB,CACEC,KAAM,4BACNC,MAAO,0BACPC,KAAM,6BAER,CACEF,KAAM,aACNC,MAAO,iBACPC,KAAM,2BAER,CACEF,KAAM,sBACNC,MAAO,UACPC,KAAM,uBAER,CACEF,KAAM,4BACNC,MAAO,aACPC,KAAM,6BAER,CACEF,KAAM,MACNC,MAAO,UACPC,KAAM,0BAER,CACEF,KAAM,cACNC,MAAO,iBACPC,KAAM,2DAER,CACEF,KAAM,8BACNC,MAAO,6BACPC,KAAM,4BAER,CACEF,KAAM,oBACNC,MAAO,YACPC,KAAM,0BAER,CACEF,KAAM,MACNC,MAAO,gBACPC,KAAM,2BAER,CACEF,KAAM,iBACNC,MAAO,uBACPC,KAAM,8BAER,CACEF,KAAM,mBACNC,MAAO,uBACPC,KAAM,2BAIV,OACE,gBAAC,EAAAC,YAAD,CACEC,MAAK,aAmBLC,OAAQ,SAACC,GAAD,OACN,uBAAKV,UCrFW,qCDsFbE,EAAMS,KAAI,YAA4B,IAAzBP,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACnBM,EAAMF,EAAKG,QAAQC,MAAMC,MAAK,qBAAGC,KAChCC,aAAaC,SAASb,MAC3BW,KAEF,OACE,qBAAGG,IAAG,QAAUf,EAAQgB,KAAMd,EAAMe,KAAK,UACvC,uBACEC,IAAKV,EAAIW,gBAAgBC,MAAMF,IAC/BvB,MAAOK,EACPqB,IAAG,YAAcrB,EACjBsB,MAAO,CAAEC,OAAQ,+B,0FEpCnC,EA1DiB,SAAC,GAAD,QACfC,KADe,IAEbC,YACEC,EAHW,EAGXA,KACAC,EAJW,EAIXA,KACAhC,EALW,EAKXA,MACAiC,EANW,EAMXA,WACAC,EAPW,EAOXA,YACAC,EARW,EAQXA,qBAEFC,EAVa,EAUbA,QACUC,EAXG,EAWbC,OAAUD,YAXG,OAcf,sBAAIpC,UAAU,kBACZ,gBAAC,EAAAsC,KAAD,CAAMC,GAAIR,GACR,uBAAK/B,UAAU,yCACb,uBACEA,UAAU,yGACVsB,IAAG,+BAAiCY,EAAjC,aAEL,uBAAKlC,UAAU,8LACb,uBAAKA,UAAU,QACb,uBAAKA,UAAU,wCAAwCD,GACvD,qBAAGC,UAAU,2BAA2BmC,IAE1C,uBAAKnC,UAAU,qBACb,uBACEA,UAAU,8BACVsB,IAAKW,EACLR,IAAG,oBAAsBO,IAE3B,uBAAKhC,UAAU,WACb,qBAAGA,UAAU,8BAA8BgC,GAC3C,qBAAGhC,UAAU,iBACV8B,EADH,MACYM,EAAYI,aCdtC,EApBiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,uBAAKzC,UAAU,QACb,0BACGyC,EAAM9B,KAAI,gBAASiB,EAAT,EAAGZ,KAAH,OACT,gBAAC,EAAD,CAAUG,IAAKS,EAAKc,GAAId,KAAMA,W,+FCgJtC,UAhJuB,SAAC,GAAc,IAC5Bd,EAD2B,EAAXJ,KACDiC,kBAAf7B,MACR,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKf,MAAM,8BACX,8CACA,uBAAKC,UAAU,SACb,0BAAQA,UAAU,QAChB,uBACE0B,MAAO,CAAEkB,UAAW,SACpB5C,UAAU,sBACVsB,IAAK,kDACLG,IAAI,0BAEN,8BAAYzB,UAAU,0CAAtB,WACW,IACT,qBACEA,UAAU,YACVoB,KAAI,2CAFN,QAKK,IAPP,KAQK,IACH,qBAAGpB,UAAU,YAAYoB,KAAK,yBAA9B,cAKJ,kCACA,6cASA,iOAG0D,IACxD,qBAAGA,KAAK,oEAAR,kCAJF,KASA,mCACA,uOAKA,mXAMa,IACX,qBAAGA,KAAK,iFAAR,6EAPF,KAaA,2bASA,kCACA,ycASA,iIAKF,sBAAIpB,UAAU,SAAd,oBACA,gBAAC,IAAD,CACEG,MAAO,CACL,CACEC,KAAM,sBACNC,MAAO,UACPC,KAAM,uBAER,CACEF,KAAM,iBACNC,MAAO,uBACPC,KAAM,iCAIZ,uBAAKN,UAAU,SACb,+CACsB,IACpB,qBAAGoB,KAAK,8BAAR,kBAFF,6ZAQ6D,IAC3D,qBAAGA,KAAK,uBAAR,uBATF,wBAcF,sBAAIpB,UAAU,SAAd,WACA,gBAAC,IAAD,CAAUyC,MAAO3B","file":"component---src-pages-projects-open-energy-data-jsx-ff5b8ca9b68bb19cd824.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport SEO from './seo';\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport './layout.css';\n// import SpecialAnnouncement from './SpecialAnnouncement';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <>\n      <SEO title={siteTitle} />\n      {/* <SpecialAnnouncement /> */}\n      <Header />\n      <main className=\"px-6 container mx-auto md:max-w-2xl lg:max-w-2xl xl:max-w-2xl mb-16\">\n        {children}\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport { logogrid } from './logocloud.module.css';\n\nexport default function LogoCloud({ logos }) {\n  const LOGOS = logos || [\n    {\n      name: 'ESA Business Applications',\n      image: 'esa_space_solutions.png',\n      link: 'https://business.esa.int/',\n    },\n    {\n      name: 'Google.org',\n      image: 'google_org.png',\n      link: 'https://www.google.org/',\n    },\n    {\n      name: 'Open Data Institute',\n      image: 'odi.png',\n      link: 'https://theodi.org/',\n    },\n    {\n      name: 'The Alan Turing Institute',\n      image: 'turing.png',\n      link: 'https://www.turing.ac.uk/',\n    },\n    {\n      name: 'UCL',\n      image: 'UCL.jpg',\n      link: 'https://www.ucl.ac.uk/',\n    },\n    {\n      name: 'Innovate UK',\n      image: 'innovateuk.png',\n      link: 'https://www.gov.uk/government/organisations/innovate-uk',\n    },\n    {\n      name: 'Machine Intelligence Garage',\n      image: 'MI-Garage_Badge_cohort.png',\n      link: 'https://www.migarage.ai/',\n    },\n    {\n      name: 'The Climate Subak',\n      image: 'subak.png',\n      link: 'https://www.subak.org/',\n    },\n    {\n      name: 'HAO',\n      image: 'hao_black.png',\n      link: 'https://haocreative.ca/',\n    },\n    {\n      name: 'Icebreaker One',\n      image: 'icebreakerOneURL.png',\n      link: 'https://icebreakerone.org/',\n    },\n    {\n      name: 'RAAIS Foundation',\n      image: 'raais_foundation.png',\n      link: 'https://www.raais.org/',\n    },\n  ];\n\n  return (\n    <StaticQuery\n      query={graphql`\n        query LogosQuery {\n          allFile(filter: { relativeDirectory: { eq: \"logos\" } }) {\n            edges {\n              node {\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 300, maxHeight: 250) {\n                    ...GatsbyImageSharpFluid\n                  }\n                  fixed(width: 300) {\n                    ...GatsbyImageSharpFixed\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={(data) => (\n        <div className={logogrid}>\n          {LOGOS.map(({ name, image, link }) => {\n            const img = data.allFile.edges.find(({ node }) =>\n              node.relativePath.endsWith(image)\n            ).node;\n\n            return (\n              <a key={`logo-${name}`} href={link} type=\"button\">\n                <img\n                  src={img.childImageSharp.fixed.src}\n                  title={name}\n                  alt={`Logo for ${name}`}\n                  style={{ filter: 'grayscale(100%)' }}\n                />\n              </a>\n            );\n          })}\n        </div>\n      )}\n    />\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport const logogrid = \"logocloud-module--logogrid--1AFqk\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({\n  post: {\n    frontmatter: {\n      date,\n      path,\n      title,\n      authorName,\n      authorImage,\n      coverImageUnsplashId,\n    },\n    excerpt,\n    fields: { readingTime },\n  },\n}) => (\n  <li className=\"list-none mb-4\">\n    <Link to={path}>\n      <div className=\"max-w-md w-full sm:max-w-full sm:flex\">\n        <img\n          className=\"h-48 w-full sm:h-auto sm:w-48 flex-none bg-cover rounded-t sm:rounded-t-none sm:rounded-l object-cover\"\n          src={`https://source.unsplash.com/${coverImageUnsplashId}/400x250`}\n        />\n        <div className=\"border-r border-b border-l border-gray-400 sm:border-l-0 sm:border-t sm:border-gray-400 bg-white rounded-b sm:rounded-b-none sm:rounded-r p-4 flex flex-col justify-between leading-normal\">\n          <div className=\"mb-8\">\n            <div className=\"text-gray-900 font-bold text-xl mb-2\">{title}</div>\n            <p className=\"text-gray-700 text-base\">{excerpt}</p>\n          </div>\n          <div className=\"flex items-center\">\n            <img\n              className=\"w-10 h-10 rounded-full mr-4\"\n              src={authorImage}\n              alt={`Avatar of author ${authorName}`}\n            />\n            <div className=\"text-sm\">\n              <p className=\"text-gray-900 leading-none\">{authorName}</p>\n              <p className=\"text-gray-600\">\n                {date} Â· {readingTime.text}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Link>\n  </li>\n);\n\nPostLink.propTypes = {\n  post: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      authorName: PropTypes.string.isRequired,\n      authorImage: PropTypes.string.isRequired,\n      coverImageUnsplashId: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PostLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PostLink from './PostLink';\n\nconst PostList = ({ posts }) => (\n  <div className=\"mt-6\">\n    <ul>\n      {posts.map(({ node: post }) => (\n        <PostLink key={post.id} post={post} />\n      ))}\n    </ul>\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default PostList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport SEO from '../../components/seo';\nimport Layout from '../../components/Layout';\nimport PostList from '../../components/PostList';\nimport LogoCloud from '../../components/LogoCloud';\n\nconst OpenEnergyPage = ({ data }) => {\n  const { edges } = data.allMarkdownRemark;\n  return (\n    <Layout>\n      <SEO title=\"Project: Open Energy Data\" />\n      <h1>Open Energy Data</h1>\n      <div className=\"prose\">\n        <figure className=\"mb-4\">\n          <img\n            style={{ maxHeight: '24rem' }}\n            className=\"object-cover w-full\"\n            src={'https://source.unsplash.com/_SFJhRPzJHs/624x384'}\n            alt=\"Blog Post Cover Image\"\n          />\n          <figcaption className=\"text-xs text-gray-600 text-center mt-1\">\n            Photo by{' '}\n            <a\n              className=\"underline\"\n              href={`https://unsplash.com/photos/_SFJhRPzJHs`}\n            >\n              NASA\n            </a>{' '}\n            on{' '}\n            <a className=\"underline\" href=\"https://unsplash.com/\">\n              Unsplash\n            </a>\n          </figcaption>\n        </figure>\n        <h2>Why?</h2>\n        <p>\n          We are facing the huge challenge of decarbonizing our electricity\n          grid. The good news is that we're making amazing progress installing\n          renewable generation and batteries and flexing demand. But these\n          millions of diverse, distributed systems must work together by\n          communicating in the same language. The bad news is that today, these\n          systems speak wildly different languages, and so it's very hard for\n          these systems to work together.\n        </p>\n        <p>\n          Sharing data in the energy system will reduce costs, lower the barrier\n          to entry for innovators, and - the bit that we at Open Climate Fix are\n          most passionate about - help achieve net-zero emissions{' '}\n          <a href=\"https://es.catapult.org.uk/reports/energy-data-taskforce-report/\">\n            [Energy Data Taskforce report]\n          </a>\n          .\n        </p>\n        <h2>What?</h2>\n        <p>\n          We need to, as a community, define elegant, open standards to allow\n          energy systems to share data whilst ensuring security, privacy and\n          legal protection, and rewarding data owners for sharing their data.\n        </p>\n        <p>\n          For example, we need to decide on how to collaboratively evolve a\n          vocabulary to describe energy assets; how to uniquely identify\n          physical assets; how to express that - for example - only authorised\n          users can access domestic meter data, but everyone can see data from\n          the grid supply point from which that domestic meter is fed. And,\n          crucially,{' '}\n          <a href=\"https://medium.com/@agentGav/the-web-of-data-vs-the-web-of-pages-a560f3e73c21\">\n            there are many non-technical problems to solve to enable this web of\n            data\n          </a>\n          .\n        </p>\n        <p>\n          If we - as a community - get these standards right then, over the\n          coming years and decades, open standards will transform everything in\n          the energy system including network management; demand-side\n          flexibility at scale; electric vehicle smart charging; energy\n          forecasting; resource planning; decarbonisation of heating; community\n          energy; research; policy; coordination of heat, power and transport;\n          the list goes on.\n        </p>\n        <h2>How?</h2>\n        <p>\n          In creating these standards, we must remember that energy companies\n          are already very busy doing a world-class job of keeping the lights\n          on. So any new standard must be as simple to implement as possible.\n          This is a great opportunity to remove the complexity that exists only\n          for historical reasons. What's really needed today? How can we make\n          these standards as easy-to-use as possible, whilst significantly\n          improving the system?\n        </p>\n        <p>\n          We can also make life easier by glueing together existing parts,\n          rather than reinventing the wheel.\n        </p>\n      </div>\n      <h2 className=\"mt-16\">Project Partners</h2>\n      <LogoCloud\n        logos={[\n          {\n            name: 'Open Data Institute',\n            image: 'odi.png',\n            link: 'https://theodi.org/',\n          },\n          {\n            name: 'Icebreaker One',\n            image: 'icebreakerOneURL.png',\n            link: 'https://icebreakerone.org/',\n          },\n        ]}\n      />\n      <div className=\"prose\">\n        <p>\n          We have worked with{' '}\n          <a href=\"https://icebreakerone.org/\">Icebreaker One</a> on a proposal\n          for how to support opening up energy data with legal and data\n          permissions structures. We are now focussed on opening up additional\n          PV data - both the metadata to describe systems, and the historical\n          generation data as a use-case which will serve as a really focussed\n          example for sharing energy data more generally, and one that supports\n          our other work. We are lucky enough to be supported by the{' '}\n          <a href=\"https://theodi.org/\">Open Data Institute</a> in this\n          endeavour.\n        </p>\n      </div>\n\n      <h2 className=\"mt-16\">Updates</h2>\n      <PostList posts={edges} />\n    </Layout>\n  );\n};\n\nOpenEnergyPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default OpenEnergyPage;\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { project: { eq: \"open-energy\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 160)\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            authorName\n            authorImage\n            coverImageUnsplashId\n          }\n          fields {\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}