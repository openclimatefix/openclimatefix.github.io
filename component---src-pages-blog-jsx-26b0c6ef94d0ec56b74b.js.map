{"version":3,"sources":["webpack://ocf-website/./src/components/Layout.jsx","webpack://ocf-website/./src/components/PostLink.jsx","webpack://ocf-website/./src/components/PostList.jsx","webpack://ocf-website/./src/pages/blog.jsx"],"names":["children","siteTitle","useStaticQuery","site","siteMetadata","title","className","post","frontmatter","date","path","authorName","authorImage","coverImageUnsplashId","excerpt","readingTime","fields","Link","to","src","alt","text","posts","map","node","key","id","edges","data","allMarkdownRemark"],"mappings":"oKA+CA,IA9Be,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAWVC,GAVOC,oBAAe,cAULC,KAAKC,aAAaC,MAEzC,OACE,gCACE,gBAAC,IAAD,CAAKA,MAAOJ,IAEZ,gBAAC,IAAD,MACA,wBAAMK,UAAU,uEACbN,GAEH,gBAAC,IAAD,S,0FCwBN,EA1DiB,SAAC,GAAD,QACfO,KADe,IAEbC,YACEC,EAHW,EAGXA,KACAC,EAJW,EAIXA,KACAL,EALW,EAKXA,MACAM,EANW,EAMXA,WACAC,EAPW,EAOXA,YACAC,EARW,EAQXA,qBAEFC,EAVa,EAUbA,QACUC,EAXG,EAWbC,OAAUD,YAXG,OAcf,sBAAIT,UAAU,kBACZ,gBAAC,EAAAW,KAAD,CAAMC,GAAIR,GACR,uBAAKJ,UAAU,yCACb,uBACEA,UAAU,yGACVa,IAAG,+BAAiCN,EAAjC,aAEL,uBAAKP,UAAU,8LACb,uBAAKA,UAAU,QACb,uBAAKA,UAAU,wCAAwCD,GACvD,qBAAGC,UAAU,2BAA2BQ,IAE1C,uBAAKR,UAAU,qBACb,uBACEA,UAAU,8BACVa,IAAKP,EACLQ,IAAG,oBAAsBT,IAE3B,uBAAKL,UAAU,WACb,qBAAGA,UAAU,8BAA8BK,GAC3C,qBAAGL,UAAU,iBACVG,EADH,MACYM,EAAYM,aCdtC,EApBiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,uBAAKhB,UAAU,QACb,0BACGgB,EAAMC,KAAI,gBAAShB,EAAT,EAAGiB,KAAH,OACT,gBAAC,EAAD,CAAUC,IAAKlB,EAAKmB,GAAInB,KAAMA,W,qFCiCtC,UAlCiB,SAAC,GAAD,IAEQoB,EAFR,EACfC,KACEC,kBAAqBF,MAFR,OAKf,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKtB,MAAM,SACX,kCACA,uQAMA,gBAAC,IAAD,CAAUiB,MAAOK","file":"component---src-pages-blog-jsx-26b0c6ef94d0ec56b74b.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport SEO from './seo';\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport './layout.css';\n// import SpecialAnnouncement from './SpecialAnnouncement';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <>\n      <SEO title={siteTitle} />\n      {/* <SpecialAnnouncement /> */}\n      <Header />\n      <main className=\"px-6 container mx-auto md:max-w-2xl lg:max-w-2xl xl:max-w-2xl mb-16\">\n        {children}\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({\n  post: {\n    frontmatter: {\n      date,\n      path,\n      title,\n      authorName,\n      authorImage,\n      coverImageUnsplashId,\n    },\n    excerpt,\n    fields: { readingTime },\n  },\n}) => (\n  <li className=\"list-none mb-4\">\n    <Link to={path}>\n      <div className=\"max-w-md w-full sm:max-w-full sm:flex\">\n        <img\n          className=\"h-48 w-full sm:h-auto sm:w-48 flex-none bg-cover rounded-t sm:rounded-t-none sm:rounded-l object-cover\"\n          src={`https://source.unsplash.com/${coverImageUnsplashId}/400x250`}\n        />\n        <div className=\"border-r border-b border-l border-gray-400 sm:border-l-0 sm:border-t sm:border-gray-400 bg-white rounded-b sm:rounded-b-none sm:rounded-r p-4 flex flex-col justify-between leading-normal\">\n          <div className=\"mb-8\">\n            <div className=\"text-gray-900 font-bold text-xl mb-2\">{title}</div>\n            <p className=\"text-gray-700 text-base\">{excerpt}</p>\n          </div>\n          <div className=\"flex items-center\">\n            <img\n              className=\"w-10 h-10 rounded-full mr-4\"\n              src={authorImage}\n              alt={`Avatar of author ${authorName}`}\n            />\n            <div className=\"text-sm\">\n              <p className=\"text-gray-900 leading-none\">{authorName}</p>\n              <p className=\"text-gray-600\">\n                {date} Â· {readingTime.text}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Link>\n  </li>\n);\n\nPostLink.propTypes = {\n  post: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      authorName: PropTypes.string.isRequired,\n      authorImage: PropTypes.string.isRequired,\n      coverImageUnsplashId: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PostLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PostLink from './PostLink';\n\nconst PostList = ({ posts }) => (\n  <div className=\"mt-6\">\n    <ul>\n      {posts.map(({ node: post }) => (\n        <PostLink key={post.id} post={post} />\n      ))}\n    </ul>\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default PostList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport SEO from '../components/seo';\nimport Layout from '../components/Layout';\nimport PostList from '../components/PostList';\n\nconst BlogPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => (\n  <Layout>\n    <SEO title=\"Blog\" />\n    <h1>Blog</h1>\n    <p>\n      One of our biggest goals at Open Climate Fix is transparency. We want to\n      let people take part in the work we do and we think that is only possible\n      by openly communicating about it. This blog is one part of how we want to\n      achieve that.\n    </p>\n    <PostList posts={edges} />\n  </Layout>\n);\n\nBlogPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              date: PropTypes.string.isRequired,\n            }).isRequired,\n          }),\n        }).isRequired\n      ),\n    }),\n  }).isRequired,\n};\n\nexport default BlogPage;\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 200)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            authorName\n            authorImage\n            coverImageUnsplashId\n          }\n          fields {\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}