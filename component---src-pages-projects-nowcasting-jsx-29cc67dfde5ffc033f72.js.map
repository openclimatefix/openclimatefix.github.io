{"version":3,"sources":["webpack://ocf-website/./src/components/Layout.jsx","webpack://ocf-website/./src/components/LogoCloud/index.jsx","webpack://ocf-website/./src/components/PostLink.jsx","webpack://ocf-website/./src/components/PostFilters.jsx","webpack://ocf-website/./src/components/PostList.jsx","webpack://ocf-website/./src/pages/projects/nowcasting.jsx"],"names":["children","siteTitle","useStaticQuery","site","siteMetadata","title","LogoCloud","LOGOS","logos","name","image","link","StaticQuery","query","render","data","className","map","img","getImage","allFile","edges","find","node","relativePath","endsWith","key","href","type","G","objectFit","alt","post","frontmatter","date","path","authorName","authorImage","coverImageUnsplashId","excerpt","readingTime","fields","Link","to","src","text","options","selected","setSelected","undefined","option","onClick","posts","useState","projectFilter","setProjectFilter","projects","useMemo","reduce","acc","project","includes","filter","id","allMarkdownRemark","S","style","gridArea","maxHeight","layout","placeholder","frameBorder","allow","allowFullScreen"],"mappings":"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","file":"component---src-pages-projects-nowcasting-jsx-29cc67dfde5ffc033f72.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport SEO from './seo';\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport './layout.css';\n// import SpecialAnnouncement from './SpecialAnnouncement';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <>\n      <SEO title={siteTitle} />\n      {/* <SpecialAnnouncement /> */}\n      <Header />\n      <main>{children}</main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nexport default function LogoCloud({ logos }) {\n  const LOGOS = logos || [\n    {\n      name: 'ESA Business Applications',\n      image: 'esa_space_solutions.png',\n      link: 'https://business.esa.int/',\n    },\n    {\n      name: 'Google.org',\n      image: 'google_org.png',\n      link: 'https://www.google.org/',\n    },\n    {\n      name: 'Open Data Institute',\n      image: 'odi.png',\n      link: 'https://theodi.org/',\n    },\n    {\n      name: 'The Alan Turing Institute',\n      image: 'turing.png',\n      link: 'https://www.turing.ac.uk/',\n    },\n    {\n      name: 'UCL',\n      image: 'UCL.jpg',\n      link: 'https://www.ucl.ac.uk/',\n    },\n    {\n      name: 'Innovate UK',\n      image: 'innovateuk.png',\n      link: 'https://www.gov.uk/government/organisations/innovate-uk',\n    },\n    {\n      name: 'The Climate Subak',\n      image: 'subak.png',\n      link: 'https://www.subak.org/',\n    },\n    {\n      name: 'HAO',\n      image: 'hao_black.png',\n      link: 'https://haocreative.ca/',\n    },\n    {\n      name: 'Icebreaker One',\n      image: 'icebreakerOneURL.png',\n      link: 'https://icebreakerone.org/',\n    },\n    {\n      name: 'RAAIS Foundation',\n      image: 'raais_foundation.png',\n      link: 'https://www.raais.org/',\n    },\n  ];\n\n  return (\n    <StaticQuery\n      query={graphql`\n        query LogosQuery {\n          allFile(filter: { relativeDirectory: { eq: \"logos\" } }) {\n            edges {\n              node {\n                relativePath\n                childImageSharp {\n                  gatsbyImageData(\n                    height: 250\n                    placeholder: BLURRED\n                    transformOptions: { grayscale: true }\n                  )\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={(data) => (\n        <div className=\"grid grid-cols-2 gap-8 sm:grid-cols-3 md:grid-cols-4 my-2\">\n          {LOGOS.map(({ name, image, link }) => {\n            const img = getImage(\n              data.allFile.edges.find(({ node }) =>\n                node.relativePath.endsWith(image)\n              ).node\n            );\n\n            return (\n              <a\n                className=\"col-span-1 flex justify-center\"\n                key={`logo-${name}`}\n                href={link}\n                type=\"button\"\n              >\n                <GatsbyImage\n                  className=\"h-14\"\n                  objectFit=\"contain\"\n                  image={img}\n                  title={name}\n                  alt={`Logo for ${name}`}\n                />\n              </a>\n            );\n          })}\n        </div>\n      )}\n    />\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({\n  post: {\n    frontmatter: {\n      date,\n      path,\n      title,\n      authorName,\n      authorImage,\n      coverImageUnsplashId,\n    },\n    excerpt,\n    fields: { readingTime },\n  },\n}) => (\n  <li className=\"list-none mb-4\">\n    <Link to={path}>\n      <div className=\"max-w-md w-full sm:max-w-full sm:flex\">\n        <img\n          className=\"h-48 w-full sm:h-auto sm:w-48 flex-none bg-cover rounded-t sm:rounded-t-none sm:rounded-l object-cover\"\n          src={`https://source.unsplash.com/${coverImageUnsplashId}/400x250`}\n        />\n        <div className=\"border-r border-b border-l border-gray-400 sm:border-l-0 sm:border-t sm:border-gray-400 bg-white rounded-b sm:rounded-b-none sm:rounded-r p-4 flex flex-col justify-between leading-normal\">\n          <div className=\"mb-8\">\n            <div className=\"text-gray-900 font-bold text-xl mb-2\">{title}</div>\n            <p className=\"text-gray-700 text-base\">{excerpt}</p>\n          </div>\n          <div className=\"flex items-center\">\n            <img\n              className=\"w-10 h-10 rounded-full mr-4\"\n              src={authorImage}\n              alt={`Avatar of author ${authorName}`}\n            />\n            <div className=\"text-sm\">\n              <p className=\"text-gray-900 leading-none\">{authorName}</p>\n              <p className=\"text-gray-600\">\n                {date} Â· {readingTime.text}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Link>\n  </li>\n);\n\nPostLink.propTypes = {\n  post: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      authorName: PropTypes.string.isRequired,\n      authorImage: PropTypes.string.isRequired,\n      coverImageUnsplashId: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PostLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PostFilters = ({ options, selected, setSelected }) => (\n  <div className=\"mb-4\">\n    {[undefined, ...options].map((option) => (\n      <button\n        className={`mr-2 my-1 text-sm py-0 px-2 border border-black-500 rounded \n          ${\n            selected === option\n              ? 'bg-gray-500 text-white hover:text-black hover:bg-transparent'\n              : 'bg-transparent text-black hover:text-white hover:bg-gray-500'\n          }`}\n        onClick={() => setSelected(option)}\n      >\n        {!option ? 'all posts' : option}\n      </button>\n    ))}\n  </div>\n);\n\nPostFilters.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selected: PropTypes.string,\n  setSelected: PropTypes.func.isRequired,\n};\n\nexport default PostFilters;\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport PostLink from './PostLink';\nimport PostFilters from './PostFilters';\n\nconst PostList = ({ posts }) => {\n  const [projectFilter, setProjectFilter] = useState();\n\n  const projects = useMemo(\n    () =>\n      posts.reduce((acc, { node: post }) => {\n        const { project } = post.frontmatter;\n        return !!project && !acc.includes(project) ? [...acc, project] : acc;\n      }, []),\n    [posts]\n  );\n\n  return (\n    <div className=\"mt-6\">\n      <PostFilters\n        options={projects}\n        selected={projectFilter}\n        setSelected={setProjectFilter}\n      />\n      <ul>\n        {posts\n          .filter(\n            ({ node: post }) =>\n              !projectFilter || projectFilter === post.frontmatter.project\n          )\n          .map(({ node: post }) => (\n            <PostLink key={post.id} post={post} />\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        frontmatter: {\n          project: PropTypes.string,\n        },\n      }).isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default PostList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport SEO from '../../components/seo';\nimport Layout from '../../components/Layout';\nimport PostList from '../../components/PostList';\nimport LogoCloud from '../../components/LogoCloud';\n\nimport { StaticImage } from 'gatsby-plugin-image';\n\nconst NowcastingPage = ({ data }) => {\n  const { edges } = data.allMarkdownRemark;\n\n  return (\n    <Layout>\n      <SEO title=\"Project: Nowcasting\" />\n      <div className=\"grid\">\n        <StaticImage\n          style={{\n            gridArea: '1/1',\n            maxHeight: 600,\n          }}\n          layout=\"fullWidth\"\n          alt=\"\"\n          src=\"../../images/cover/clouds.png\"\n        />\n        <div\n          className=\"grid relative place-items-center\"\n          style={{\n            gridArea: '1/1',\n          }}\n        >\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 pb-20 md:pb-44\">\n            <h1 className=\"text-4xl text-white text-center font-light filter drop-shadow-lg hidden\">\n              Nowcasting\n            </h1>\n            <StaticImage\n              placeholder=\"blurred\"\n              objectFit=\"contain\"\n              alt=\"Nowcasting Logo\"\n              className=\"h-12 sm:h-16\"\n              src=\"../../images/logos/nowcasting_white.png\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <main className=\"-mt-20 md:-mt-44\">\n        <div className=\"max-w-6xl mx-auto pb-12 px-4 sm:px-6 lg:px-8\">\n          {/* COVER */}\n          <div className=\"bg-white rounded-lg  max-w-4xl mx-auto\">\n            <div className=\"aspect-w-16 aspect-h-9 rounded-lg overflow-hidden shadow-xl\">\n              <iframe\n                src=\"https://www.youtube-nocookie.com/embed/IOp-tj-IJpk?controls=0\"\n                frameBorder=\"0\"\n                allow=\"accelerometer; encrypted-media; gyroscope\"\n                allowFullScreen\n              ></iframe>\n            </div>\n          </div>\n\n          {/* TEXT CONTENT */}\n          <div className=\"max-w-prose mx-auto\">\n            <article className=\"mt-10 prose mx-auto\">\n              <p className=\"text-2xl border-l-4 pl-6\">\n                Forecasting solar photovoltaic (PV) power production is hard: As\n                clouds move over PV panels, the power output moves up and down\n                rapidly. We devised a solution to keep the balance.\n              </p>\n              <h2>Why?</h2>\n              <p>\n                Solar Photovoltaics (PV) is one of the most significant sources\n                of uncertainty in the UKâs power forecasts. To mitigate against\n                the risk of a large cloud sweeping across the country (and hence\n                the grid losing gigawatts of PV generation), the Electricity\n                System Operator (National Grid) keeps lots of natural gas\n                generators operating at less than full capacity, so they have\n                headroom to ramp up quickly (spinning reserve).\n              </p>\n              <p>\n                The physics of the grid dictate that - at every instant - supply\n                must precisely match demand. So, any loss in PV supply must be\n                immediately replaced. These gas turbines are kept idling because\n                they take several hours to start up from cold, but they can be\n                ramped up very quickly from idle. Spinning reserve costs a lot\n                of money and pumps out a lot of CO2.\n              </p>\n              <figure>\n                <img\n                  src=\"https://source.unsplash.com/XGAZzyLzn18/624x384\"\n                  alt=\"Solar panels on a field\"\n                />\n                <figcaption>\n                  Photo by{' '}\n                  <a href=\"https://unsplash.com/photos/XGAZzyLzn18\">\n                    American Public Power Association\n                  </a>{' '}\n                  on <a href=\"https://unsplash.com/\">Unsplash</a>\n                </figcaption>\n              </figure>\n              <p>\n                If National Grid had better PV forecasts, even for the next few\n                hours, they could reduce the amount of spinning reserve\n                required, and hence reduce emissions (by about 100,000 tonnes\n                per year for the UK{' '}\n                <a href=\"https://docs.google.com/document/d/1sfBJ48_hxSEH-XFrwmH0leS4rSsrBKgwzfoeoqGRPfg/edit#heading=h.m4udy6vx0t7k\">\n                  [Details]\n                </a>\n                ) and reduce costs.\n              </p>\n              <p>\n                Electricity traders and PV farm owners will be able to use\n                better short-term PV forecasts to optimise trading decisions in\n                intra-day markets.\n              </p>\n              <p>\n                Further, this unpredictability of PV power inhibits the\n                investment and onboarding of new PV generation farms, as the\n                local and national system operators are concerned about these\n                unexpected weather events destabilising the grid. By providing\n                greater predictability of PV power output, we can make PV power\n                investments lower risk for all stakeholders.\n              </p>\n\n              <h2>What?</h2>\n              <p>\n                Nowcasting is a bit of an odd term. It means \"forecasting for\n                the next few hours\". In general, nowcasting doesn't use the\n                hugely complex and computationally-expensive numerical weather\n                models that run on supercomputers and constitute the\n                bread-and-butter for most forecasting agencies. Instead,\n                nowcasting usually uses statistical or machine learning\n                techniques to take recent observations and roll them forwards.\n              </p>\n\n              <h2>How?</h2>\n              <p>\n                It turns out that most nowcasting research up until now has been\n                done on rainfall (because predicting floods saves lives and\n                property). Relatively little research has been done on\n                nowcasting sunlight.\n              </p>\n              <p>\n                Our main interest is in trying to build machine learning models\n                to forecast solar PV (which basically boils down to trying to\n                predict the movement and evolution of clouds). We will spend the\n                majority of the next year or two writing code to experiment with\n                new ways to predict sunlight for the next few hours. Inputs to\n                the model may include satellite images of clouds, numerical\n                weather predictions, vertical cloud profiles, and geographical\n                information. We will utilize the teamâs experience in Machine\n                Learning as well as contributors from the open source community\n                to accelerate progress.\n              </p>\n              <p>\n                As quickly as possible, we'd like to get early-stage prototype\n                PV forecasts used displayed in the National Grid control room,\n                to validate our modelâs effectiveness and so we can start\n                measuring the impact on emissions and cost. Beyond that we will\n                release a nowcasting product for general market consumption.\n              </p>\n              <h2 className=\"pb-4\">Project Supporters</h2>\n            </article>\n            <LogoCloud\n              logos={[\n                {\n                  name: 'ESA Business Applications',\n                  image: 'esa_space_solutions.png',\n                  link: 'https://business.esa.int/',\n                },\n                {\n                  name: 'Google.org',\n                  image: 'google_org.png',\n                  link: 'https://www.google.org/',\n                },\n              ]}\n            />\n            <div className=\"prose mt-16\">\n              <h2>Updates</h2>\n            </div>\n            <PostList posts={edges} />\n          </div>\n        </div>\n      </main>\n    </Layout>\n  );\n};\n\nNowcastingPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default NowcastingPage;\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { project: { eq: \"nowcasting\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 160)\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            authorName\n            authorImage\n            coverImageUnsplashId\n          }\n          fields {\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}