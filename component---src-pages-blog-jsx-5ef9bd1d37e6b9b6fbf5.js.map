{"version":3,"sources":["webpack:///./src/components/Layout.jsx","webpack:///./src/pages/blog.jsx","webpack:///./src/components/PostLink.jsx","webpack:///./src/components/PostList.jsx"],"names":["Layout","children","siteTitle","site","siteMetadata","title","className","BlogPage","edges","data","allMarkdownRemark","posts","pageQuery","PostLink","post","frontmatter","date","to","path","PostList","map","node","key","id"],"mappings":"wRA6CeA,IA7BA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAWVC,EAVI,OAUaC,KAAKC,aAAaC,MAEzC,OACE,oCACE,kBAAC,IAAD,CAAKA,MAAOH,IACZ,kBAAC,IAAD,MACA,0BAAMI,UAAU,uEACbL,GAEH,kBAAC,IAAD,S,oCCpCN,8GA0CeM,UAlCE,SAAC,GAAD,IAEQC,EAFR,EACfC,KACEC,kBAAqBF,MAFR,OAKf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKH,MAAM,SACX,oCACA,yQAMA,kBAAC,IAAD,CAAUM,MAAOH,MAqBd,IAAMI,EAAS,c,uECnBPC,EApBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,4BACE,8BACGA,EAAKC,YAAYC,KADpB,KAIA,kBAAC,OAAD,CAAMC,GAAIH,EAAKC,YAAYG,MAAOJ,EAAKC,YAAYV,SCexCc,IApBE,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAH,OACf,yBAAKL,UAAU,iBACb,4BACGK,EAAMS,KAAI,gBAASN,EAAT,EAAGO,KAAH,OACT,kBAAC,EAAD,CAAUC,IAAKR,EAAKS,GAAIT,KAAMA","file":"component---src-pages-blog-jsx-5ef9bd1d37e6b9b6fbf5.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport SEO from './seo';\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport './layout.css';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <>\n      <SEO title={siteTitle} />\n      <Header />\n      <main className=\"px-6 container mx-auto md:max-w-2xl lg:max-w-2xl xl:max-w-2xl mb-16\">\n        {children}\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport SEO from '../components/seo';\nimport Layout from '../components/Layout';\nimport PostList from '../components/PostList';\n\nconst BlogPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => (\n  <Layout>\n    <SEO title=\"Blog\" />\n    <h1>Blog</h1>\n    <p>\n      One of our biggest goals at Open Climate Fix is transparency. We want to\n      let people take part in the work we do and we think that is only possible\n      by openly communicating about it. This blog is one part of how we want to\n      achieve that.\n    </p>\n    <PostList posts={edges} />\n  </Layout>\n);\n\nBlogPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              date: PropTypes.string.isRequired,\n            }).isRequired,\n          }),\n        }).isRequired\n      ),\n    }),\n  }).isRequired,\n};\n\nexport default BlogPage;\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({ post }) => (\n  <li>\n    <span>\n      {post.frontmatter.date}\n      &ensp;\n    </span>\n    <Link to={post.frontmatter.path}>{post.frontmatter.title}</Link>\n  </li>\n);\n\nPostLink.propTypes = {\n  post: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PostLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PostLink from './PostLink';\n\nconst PostList = ({ posts }) => (\n  <div className=\"markdown mt-6\">\n    <ul>\n      {posts.map(({ node: post }) => (\n        <PostLink key={post.id} post={post} />\n      ))}\n    </ul>\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default PostList;\n"],"sourceRoot":""}