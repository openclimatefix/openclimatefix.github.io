{"version":3,"sources":["webpack:///./src/components/LogoCloud/index.jsx","webpack:///./src/components/Layout.jsx","webpack:///./src/components/LogoCloud/logocloud.module.css","webpack:///./src/pages/projects/forecasting.jsx","webpack:///./src/components/PostLink.jsx","webpack:///./src/components/PostList.jsx"],"names":["LogoCloud","LOGOS","logos","name","image","link","query","render","data","className","logocloudStyles","logogrid","map","img","allFile","edges","find","node","relativePath","endsWith","key","href","type","src","childImageSharp","fixed","title","alt","style","filter","Layout","children","siteTitle","useStaticQuery","site","siteMetadata","module","exports","NowcastingPage","allMarkdownRemark","frameBorder","allow","allowFullScreen","posts","pageQuery","PostLink","post","frontmatter","date","path","authorName","authorImage","coverImageUnsplashId","excerpt","readingTime","fields","to","text","PostList","id"],"mappings":"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","file":"component---src-pages-projects-forecasting-jsx-188375f7a98b2bd1fca0.js","sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport logocloudStyles from './logocloud.module.css';\n\nexport default function LogoCloud({ logos }) {\n  const LOGOS = logos || [\n    {\n      name: 'ESA Business Applications',\n      image: 'esa_space_solutions.png',\n      link: 'https://business.esa.int/',\n    },\n    {\n      name: 'Open Data Institute',\n      image: 'odi.png',\n      link: 'https://theodi.org/',\n    },\n    {\n      name: 'The Alan Turing Institute',\n      image: 'turing.png',\n      link: 'https://www.turing.ac.uk/',\n    },\n    {\n      name: 'UCL',\n      image: 'UCL.jpg',\n      link: 'https://www.ucl.ac.uk/',\n    },\n    {\n      name: 'Machine Intelligence Garage',\n      image: 'MI-Garage_Badge_cohort.png',\n      link: 'https://www.migarage.ai/',\n    },\n    {\n      name: 'The Climate Subak',\n      image: 'subak.png',\n      link: 'https://www.subak.org/',\n    },\n    // {\n    //   name: 'HAO',\n    //   image: 'hao_black.png',\n    //   link: 'https://haocreative.ca/',\n    // },\n    {\n      name: 'Icebreaker One',\n      image: 'icebreakerOneURL.png',\n      link: 'https://icebreakerone.org/',\n    },\n    {\n      name: 'RAAIS Foundation',\n      image: 'raais_foundation.png',\n      link: 'https://www.raais.org/',\n    },\n  ];\n\n  return (\n    <StaticQuery\n      query={graphql`\n        query LogosQuery {\n          allFile(filter: { relativeDirectory: { eq: \"logos\" } }) {\n            edges {\n              node {\n                relativePath\n                childImageSharp {\n                  fluid(maxWidth: 300, maxHeight: 250) {\n                    ...GatsbyImageSharpFluid\n                  }\n                  fixed(width: 300) {\n                    ...GatsbyImageSharpFixed\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={(data) => (\n        <div className={logocloudStyles.logogrid}>\n          {LOGOS.map(({ name, image, link }) => {\n            const img = data.allFile.edges.find(({ node }) =>\n              node.relativePath.endsWith(image)\n            ).node;\n\n            return (\n              <a key={`logo-${name}`} href={link} type=\"button\">\n                <img\n                  src={img.childImageSharp.fixed.src}\n                  title={name}\n                  alt={`Logo for ${name}`}\n                  style={{ filter: 'grayscale(100%)' }}\n                />\n              </a>\n            );\n          })}\n        </div>\n      )}\n    />\n  );\n}\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport SEO from './seo';\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport './layout.css';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <>\n      <SEO title={siteTitle} />\n      <Header />\n      <main className=\"px-6 container mx-auto md:max-w-2xl lg:max-w-2xl xl:max-w-2xl mb-16\">\n        {children}\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logogrid\":\"logocloud-module--logogrid--gkKmS\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport SEO from '../../components/seo';\nimport Layout from '../../components/Layout';\nimport PostList from '../../components/PostList';\nimport LogoCloud from '../../components/LogoCloud';\n\nconst NowcastingPage = ({ data }) => {\n  const { edges } = data.allMarkdownRemark;\n  return (\n    <Layout>\n      <SEO title=\"Project: Forecasting\" />\n      <h1>Forecasting</h1>\n      <div className=\"markdown\">\n        <div className=\"video-wrapper\">\n          <iframe\n            title=\"Forecasting Video\"\n            src=\"https://www.youtube.com/embed/IOp-tj-IJpk\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n        </div>\n        <h2>Why?</h2>\n        <p>\n          Solar Photovoltaics (PV) is one of the most significant sources of\n          uncertainty in the UKâ€™s power forecasts. To mitigate against the risk\n          of a large cloud sweeping across the country (and hence the grid\n          losing gigawatts of PV generation), the Electricity System Operator\n          (National Grid) keeps lots of natural gas generators operating at less\n          than full capacity, so they have headroom to ramp up quickly (spinning\n          reserve).\n        </p>\n        <p>\n          These gas turbines are kept idling because they take several hours to\n          start up from cold, but they can be ramped up very quickly from idle;\n          and the physics of the grid dictate that - at every instant - supply\n          must precisely match demand. So, any loss in PV supply must be\n          immediately replaced. Spinning reserve costs a lot of money and pumps\n          out a lot of CO2.\n        </p>\n        <p>\n          These gas turbines are kept ramped down because they take several\n          hours to start up from cold, but they can be ramped up quickly once\n          they're running. The physics of the grid dictate that, at every\n          instant, supply must precisely match demand. So, any loss in PV supply\n          must be immediately replaced. Spinning reserve costs a lot of money\n          and pumps out a lot of CO2.\n        </p>\n        <p>\n          If National Grid had better PV forecasts, even for the next few hours,\n          they could reduce the amount of spinning reserve required, and hence\n          reduce emissions (by about 100,000 tonnes per year for the UK{' '}\n          <a href=\"https://docs.google.com/document/d/1sfBJ48_hxSEH-XFrwmH0leS4rSsrBKgwzfoeoqGRPfg/edit#heading=h.m4udy6vx0t7k\">\n            [Explanation]\n          </a>\n          ) and reduce costs.\n        </p>\n        <p>\n          Further, this unpredictability of PV power inhibits the investment and\n          onboarding of new PV generation farms, as the local and national\n          system operators are concerned about these unexpected events\n          destabilising the grid. By providing greater visibility of PV power\n          output, we can make PV power investments more palatable for all\n          stakeholders.\n        </p>\n\n        <h2>What?</h2>\n        <p>\n          Nowcasting is a bit of an odd term. It means \"forecasting for the next\n          few hours\". In general, nowcasting doesn't use the hugely complex and\n          computationally-expensive numerical weather models that run on\n          supercomputers and constitute the bread-and-butter for most\n          forecasting agencies. Instead, nowcasting usually uses statistical or\n          machine learning techniques to take recent observations and roll them\n          forwards.\n        </p>\n\n        <h2>How?</h2>\n        <p>\n          It turns out that most nowcasting research up until now has been done\n          on rainfall (because predicting floods saves lives and property).\n          Relatively little research has been done on nowcasting sunlight.\n        </p>\n        <p>\n          Our main interest is in trying to build machine learning models to\n          forecast solar PV (which basically boils down to trying to predict the\n          movement and evolution of clouds). We'd like to spend the majority of\n          the next year or two writing code to experiment with new ways to\n          predict sunlight for the next few hours. Inputs to the model may\n          include satellite images of clouds, numerical weather predictions,\n          vertical cloud profiles, and geographical information.\n        </p>\n        <p>\n          As quickly as possible, we'd like to get prototype PV forecasts\n          displayed in the National Grid control room, so we can start measuring\n          the impact on emissions and cost.\n        </p>\n      </div>\n      <h2 className=\"mt-16\">Project Partners</h2>\n      <LogoCloud\n        logos={[\n          {\n            name: 'ESA Business Applications',\n            image: 'esa_space_solutions.png',\n            link: 'https://business.esa.int/',\n          },\n        ]}\n      />\n      <div className=\"markdown\">\n        <p>\n          <a href=\"https://business.esa.int/\">ESA Business Applications</a> aims\n          to show that space is open for business and has the power to improve\n          our everyday lives on Earth. They do this by helping companies to\n          integrate space data and technology into commercial services.\n        </p>\n        <p>\n          ESA awarded us an AI Kick-Start co-funding for six months. Kick-Start\n          activities are compact Feasability Studies to explore new service\n          concepts that use space tech. We will ask potential users of\n          forecasting what they need; and how best to serve those needs.\n        </p>\n      </div>\n\n      <h2 className=\"mt-16\">Updates</h2>\n      <PostList posts={edges} />\n    </Layout>\n  );\n};\n\nNowcastingPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default NowcastingPage;\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { project: { eq: \"nowcasting\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 160)\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            authorName\n            authorImage\n            coverImageUnsplashId\n          }\n          fields {\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({\n  post: {\n    frontmatter: {\n      date,\n      path,\n      title,\n      authorName,\n      authorImage,\n      coverImageUnsplashId,\n    },\n    excerpt,\n    fields: { readingTime },\n  },\n}) => (\n  <li className=\"list-none mb-4\">\n    <Link to={path}>\n      <div className=\"max-w-md w-full sm:max-w-full sm:flex\">\n        <img\n          className=\"h-48 w-full sm:h-auto sm:w-48 flex-none bg-cover rounded-t sm:rounded-t-none sm:rounded-l object-cover\"\n          src={`https://source.unsplash.com/${coverImageUnsplashId}/400x250`}\n        />\n        <div className=\"border-r border-b border-l border-gray-400 sm:border-l-0 sm:border-t sm:border-gray-400 bg-white rounded-b sm:rounded-b-none sm:rounded-r p-4 flex flex-col justify-between leading-normal\">\n          <div className=\"mb-8\">\n            <div className=\"text-gray-900 font-bold text-xl mb-2\">{title}</div>\n            <p className=\"text-gray-700 text-base\">{excerpt}</p>\n          </div>\n          <div className=\"flex items-center\">\n            <img\n              className=\"w-10 h-10 rounded-full mr-4\"\n              src={authorImage}\n              alt={`Avatar of author ${authorName}`}\n            />\n            <div className=\"text-sm\">\n              <p className=\"text-gray-900 leading-none\">{authorName}</p>\n              <p className=\"text-gray-600\">\n                {date} Â· {readingTime.text}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Link>\n  </li>\n);\n\nPostLink.propTypes = {\n  post: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      authorName: PropTypes.string.isRequired,\n      authorImage: PropTypes.string.isRequired,\n      coverImageUnsplashId: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PostLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PostLink from './PostLink';\n\nconst PostList = ({ posts }) => (\n  <div className=\"mt-6\">\n    <ul>\n      {posts.map(({ node: post }) => (\n        <PostLink key={post.id} post={post} />\n      ))}\n    </ul>\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default PostList;\n"],"sourceRoot":""}