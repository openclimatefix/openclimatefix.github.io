{"version":3,"sources":["webpack:///./src/pages/projects/nowcasting.jsx","webpack:///./src/components/Layout.jsx","webpack:///./src/components/PostLink.jsx","webpack:///./src/components/PostList.jsx"],"names":["NowcastingPage","edges","data","allMarkdownRemark","title","className","src","frameBorder","allow","allowFullScreen","posts","pageQuery","Layout","children","siteTitle","site","siteMetadata","PostLink","post","frontmatter","date","to","path","PostList","map","node","key","id"],"mappings":"sMAAA,8GAsGeA,UA9FQ,SAAC,GAAc,IAC5BC,EAD2B,EAAXC,KACDC,kBAAfF,MACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,MAAM,wBACX,0CACA,0BAAMC,UAAU,YACd,yBAAKA,UAAU,iBACb,4BACED,MAAM,aACNE,IAAI,4CACJC,YAAY,IACZC,MAAM,0EACNC,iBAAe,KAGnB,oCACA,qUAKyB,gDALzB,MAQA,sYAQA,oPAMA,qCACA,qYAOE,kDAPF,KASA,oCACA,0NAKA,yeASA,uMAMF,uBAAGJ,UAAU,qBAAb,oBACA,kBAAC,IAAD,CAAUK,MAAOT,MAwBhB,IAAMU,EAAS,a,qHC1DPC,IA7BA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAWVC,EAVI,OAUaC,KAAKC,aAAaZ,MAEzC,OACE,oCACE,kBAAC,IAAD,CAAKA,MAAOU,IACZ,kBAAC,IAAD,MACA,0BAAMT,UAAU,uEACbQ,GAEH,kBAAC,IAAD,S,uECZSI,EApBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,4BACE,8BACGA,EAAKC,YAAYC,KADpB,KAIA,kBAAC,OAAD,CAAMC,GAAIH,EAAKC,YAAYG,MAAOJ,EAAKC,YAAYf,SCexCmB,IApBE,SAAC,GAAD,IAAGb,EAAH,EAAGA,MAAH,OACf,yBAAKL,UAAU,iBACb,4BACGK,EAAMc,KAAI,gBAASN,EAAT,EAAGO,KAAH,OACT,kBAAC,EAAD,CAAUC,IAAKR,EAAKS,GAAIT,KAAMA","file":"component---src-pages-projects-nowcasting-jsx-8763223edbe0d4ef0660.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport SEO from '../../components/seo';\nimport Layout from '../../components/Layout';\nimport PostList from '../../components/PostList';\n\nconst NowcastingPage = ({ data }) => {\n  const { edges } = data.allMarkdownRemark;\n  return (\n    <Layout>\n      <SEO title=\"Project: Nowcasting\" />\n      <h1>Nowcasting</h1>\n      <main className=\"markdown\">\n        <div className=\"video-wrapper\">\n          <iframe\n            title=\"nowcasting\"\n            src=\"https://www.youtube.com/embed/IOp-tj-IJpk\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n        </div>\n        <h2>Why?</h2>\n        <p>\n          Solar Photovoltaics (PV) is the single biggest source of uncertainty\n          in the National Grid&apos;s forecasts. To mitigate against the risk of\n          a large cloud sweeping across the country (and hence the grid losing\n          gigawatts of PV generation), the National Grid keep lots of natural\n          gas generators idling (<em>spinning reserve</em>\n          ).\n        </p>\n        <p>\n          These gas turbines are kept idling because they take several hours to\n          start up from cold, but they can be ramped up very quickly from idle;\n          and the physics of the grid dictate that - at every instant - supply\n          must precisely match demand. So, any loss in PV supply must be\n          immediately replaced. Spinning reserve costs a lot of money and pumps\n          out a lot of CO2.\n        </p>\n        <p>\n          If the National Grid had better PV forecasts, even for the next few\n          hours, they could reduce the amount of spinning reserve required, and\n          hence reduce emissions (by about 100,000 tonnes per year) and reduce\n          costs.\n        </p>\n        <h2>What?</h2>\n        <p>\n          Nowcasting is a bit of an odd term. It means &quot;forecasting for the\n          next few hours&quot;. In general, nowcasting doesn&apos;t use the\n          hugely complex and expensive numerical weather models that run on\n          super computers and constitute the bread-and-butter for most\n          forecasting agencies. Instead, nowcasting usually uses statistical\n          techniques to take recent observations and\n          <em>roll them forwards</em>.\n        </p>\n        <h2>How?</h2>\n        <p>\n          It turns out that most nowcasting research up until now has been done\n          on rainfall (because predicting floods saves lives). Relatively little\n          research has been done on nowcasting sunlight.\n        </p>\n        <p>\n          Our main interest is in trying to build machine learning models to\n          nowcast solar PV (which basically boils down to trying to predict the\n          movement and evolution of clouds). We&apos;d like to spend the\n          majority of the next year or two writing code to experiment with new\n          ways to predict sunlight for the next few hours. Inputs to the model\n          may include satellite images of clouds, numerical weather predictions,\n          vertical cloud profiles, and geographical information.\n        </p>\n        <p>\n          As quickly as possible, we&apos;d like to get prototype PV nowcasts\n          displayed in the National Grid control room, so we can start measuring\n          the impact on emissions and cost.\n        </p>\n      </main>\n      <p className=\"text-xl mt-6 mb-1\">More Information</p>\n      <PostList posts={edges} />\n    </Layout>\n  );\n};\n\nNowcastingPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default NowcastingPage;\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { project: { eq: \"nowcasting\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport SEO from './seo';\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport './layout.css';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <>\n      <SEO title={siteTitle} />\n      <Header />\n      <main className=\"px-6 container mx-auto md:max-w-2xl lg:max-w-2xl xl:max-w-2xl mb-16\">\n        {children}\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({ post }) => (\n  <li>\n    <span>\n      {post.frontmatter.date}\n      &ensp;\n    </span>\n    <Link to={post.frontmatter.path}>{post.frontmatter.title}</Link>\n  </li>\n);\n\nPostLink.propTypes = {\n  post: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PostLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PostLink from './PostLink';\n\nconst PostList = ({ posts }) => (\n  <div className=\"markdown mt-6\">\n    <ul>\n      {posts.map(({ node: post }) => (\n        <PostLink key={post.id} post={post} />\n      ))}\n    </ul>\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default PostList;\n"],"sourceRoot":""}